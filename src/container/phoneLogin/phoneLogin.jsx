import React,{Component} from 'react'import {Link} from 'react-router-dom'import {connect} from 'react-redux'import './phoneLogin.styl'import {Toast} from 'antd-mobile'import LoginHeader from '../../components/loginHeader/loginHeader'import LoginLogo from '../../components/loginLogo/loginLogo'import LoginFooter from '../../components/loginFooter/loginFooter'import {login,alerTexts,cancelAlertShow} from "../../redux/actions";import AlertTip from '../../components/alretTip/alretTip'class PhoneLogin extends Component{  state = {    isCodeLogin : true,    isShow: false,    isShowALert: false,    phoneNumber:'',    msgCode:'',    password: ''  }  switchLogin = () => {    return (      this.setState({        isCodeLogin:!this.state.isCodeLogin      })    )  }  toLogin= () => {    let {phoneNumber,msgCode,password,} = this.state    const phoneEXT = /^[1][3,4,5,7,8][0-9]{9}$/    if (this.state.isCodeLogin){      if (phoneNumber==='') {        this.changeShow('手机号不为空')        // 直接return不执行下面的        return      }else if (!phoneEXT.test(phoneNumber)){        this.changeShow('请输入正确的手机号码')        // 直接return不执行下面的        return      }else if (msgCode === ''){        this.changeShow('验证码不为空')        // 直接return不执行下面的        return      }else if (!/^\d{6}$/.test(msgCode)){        console.log(msgCode)        this.changeShow('请输入六位数验证码')        // 直接return不执行下面的        return      } else{        Toast.info('登录成功', 1);        phoneNumber=''        msgCode=''        this.props.history.replace('/personal')      }    } else if (!this.state.isCodeLogin){      if (phoneNumber==='') {        this.changeShow('手机号不为空')        // 直接return不执行下面的        return      }else if (password === ''){        this.changeShow('密码不为空')        // 直接return不执行下面的        return      }else if (!(/^.*(?=.{6,})(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/).test(password)){        this.changeShow('最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符')        // 直接return不执行下面的        return      } else {        Toast.info('登录成功', 1);          phoneNumber='',          msgCode=''          password=''        this.props.history.replace('/personal/:phoneNumber')      }    }    this.props.login(true)    this.props.history.replace('/personal')  }  changeShow= (Texts)=>{    this.props.alerTexts(Texts)    this.props.cancelAlertShow(true)  }  handleChange= (name,event) =>{    this.setState({      [name]:event.target.value    })  }  clearInput =(ev) => {    ev.preventDefault()    console.log(111)    this.setState({      phoneNumber: '',      msgCode: '',      password:''    })}  render() {    const {isCodeLogin,isShow,phoneNumber,msgCode,password} = this.state    const {alertText,isShowALert} = this.props.alerttiptext    console.log('xxx'+isShowALert)    return (      <div className="phoneWrap">        <LoginHeader/>        <LoginLogo/>        {          isCodeLogin?(            <div className="codeLoginContainer">              <form action="#">                <div className='inputWrap' >                  <input type="text" placeholder='请输入手机号' maxLength='11' onChange={(event)=>{this.handleChange('phoneNumber',event)}}/>                  {                    phoneNumber!==''? (<i className='closeIcon' onClick={(ev)=>this.clearInput(ev)}></i>) : null                  }                </div>                <div className="scrollCode">                  <div className='picSlider'>                    <img src={require('./images/bigPin.jpg')} alt="" className='big' />                    <img src={require('./images/small.jpg')} alt="" className='small' />                  </div>                  <div className="slider">                    <img src={require('./images/slider.png')} alt="" />                    <span>按住滑块，拖动完成上方拼图</span>                  </div>                </div>                <div className="codeLogin">                  <input type="text" placeholder='请输入短信验证码' maxLength='6' className='inputcode'  onChange={(event)=>{this.handleChange('msgCode',event)}}/>                  <div className="getCode">                    <span>获取验证码</span>                  </div>                </div>                <div className="sendMsg">                  <span className='question'>遇到问题</span>                  <span className='clickLogin' onClick={this.switchLogin}>使用验证码登陆</span>                </div>                <div className="loginbtn" onClick={this.toLogin}>                  <span>登录</span>                </div>              </form>            </div>          ) : (            <div className="messageLoginContainer">              <form action="">                <div className="container">                  <div className="inputbox">                    <input type="tel" placeholder='请输入手机号' maxLength='11' onChange={(event)=>{this.handleChange('phoneNumber',event)}}/>                    {                      phoneNumber? (<i className='closeIcon' onClick={(ev)=>this.clearInput(ev)}></i>) : null                    }                  </div>                  <div className="inputbox">                    <input type="password" placeholder='请输入密码' onChange={(event)=>{this.handleChange('password',event)}}/>                    {                      password? (<i className='closeIcon' onClick={(ev)=>this.clearInput(ev)}></i>) : null                    }                  </div>                  <div className="sendMsg">                    <span className='question'>忘记密码？</span>                    <span className='clickLogin' onClick={this.switchLogin}>使用短信验证登录</span>                  </div>                  <div className="loginbtn" onClick={this.toLogin}>                    <span>登录</span>                  </div>                </div>              </form>            </div>          )        }        <LoginFooter/>        {isShowALert? (<AlertTip/>):null}      </div>  )  }}export default connect(  state=> ({userIslogin:state.userIslogin,    alerttiptext:state.alerttiptext,}),  {login,alerTexts,cancelAlertShow})(PhoneLogin)