/*主路由 */import React,{Component} from 'react'import {connect} from 'react-redux'import Swiper from 'swiper'import {reqCatelist,  reqFlashSaleIndexVO,  reqFocuslist,  reqSaleindexvo,  reqPolicydesclist,  reqTaglist,  reqTopiclist,  reqNewitemlist,  reqPopularitemlist} from "../../api";import BScroll from 'better-scroll'import 'swiper/dist/css/swiper.min.css'// import FirstAlertTip from '../../components/fir// stAlertTip/firstAlertTip'import GoodClassList from '../../components/goodClassList/goodClassList'import FirstPageBotton from '../../components/firstPageBottom/firstPageBottom'import ToTop from '../../components/toTop/toTop'import FirstItemList from '../../components/firstItemList/firstItemList'import './home.styl'export default class Home extends Component{    state =  {      cateList: [], // 商品列表      flashSaleIndexVO: {}, // 获取限时购信息      focusList: [], // 轮播图信息      headCateList: [], // 头部商品列表      newItemList: [], // 新品列表      policyDescList: [], // 网易政策列表      popularItemList: [], // 受欢迎的列表      saleIndexVO: {}, // 福利社      tagList: [], // 品牌制造商列表      topicList: [], // 专题精选      isShowPoint: false,      newItem: "newItem",      popularItem: "popularItem"    }    componentDidMount () {       // 调用异步函数        this.getCateList()        this.getFlashSaleIndexVO()        this.getFocusList()        this.getPolicydesclist()        this.getTaglist()        this.getSaleindexvo()        this.getTopiclist()        this.getNewItemList()        this.getPopularItemList()      // 首页顶部导航滑动事件      new BScroll('.navWrap', {        scrollX: true,        click: true      })      // 首页专题精选滑动      new BScroll('.goodSelect > .selectBottom > .picWrap', {        scrollX: true,        click: true,        eventPassthrough: 'vertical'      })      // 控制底部小圆点的显示隐藏      window.addEventListener('scroll', this.handleScroll)    }  componentWillUnmount() {    if (this.swiper) { // 销毁swiper      this.swiper.destroy()    }  }  componentDidUpdate() {    if(this.swiper){      this.swiper.slideTo(0, 0)      this.swiper.destroy()      this.swiper = null;    }    this.swiper =new Swiper('.swiper-container', {      loop: true,      pagination: {        el: '.swiper-pagination',        type: 'bullets',      },    })  }      async getCateList () {        const result = await reqCatelist()        if (result.code === 0) {          const cateList = result.data          this.setState({            cateList          })        }      }      async getFlashSaleIndexVO () {        const result = await reqFlashSaleIndexVO()        if (result.code === 0) {          const flashSaleIndexVO = result.data          this.setState({            flashSaleIndexVO          })        }      }      async getFocusList () {        const result = await reqFocuslist()        if (result.code === 0) {          const focusList = result.data          this.setState({            focusList          })        }      }      async getPolicydesclist () {        const result = await reqPolicydesclist()        if (result.code === 0) {          const policyDescList = result.data          this.setState({            policyDescList          })        }      }      async getTaglist () {        const result = await reqTaglist()        if (result.code === 0) {          const tagList = result.data          this.setState({            tagList          })        }      }      async getTopiclist () {        const result = await reqTopiclist()        if (result.code === 0) {          const topicList = result.data          this.setState({            topicList          })        }      }      async getSaleindexvo () {        const result = await reqSaleindexvo()        if (result.code === 0) {          const saleIndexVO = result.data          this.setState({            saleIndexVO          })        }      }      async getNewItemList () {        const result = await reqNewitemlist()        if (result.code === 0) {          const newItemList = result.data          this.setState({            newItemList          })        }      }      async getPopularItemList () {        const result = await reqPopularitemlist()        if (result.code === 0) {          const popularItemList = result.data          this.setState({            popularItemList          })        }      }      addClass = (event) =>{    const tabLis = document.querySelectorAll('.tab')        for (let i=0; i<tabLis.length; i++){      tabLis[i].className= 'tab'    }    event.target.className= 'tab active'  }      handleScroll = () => {      this.scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop      if (this.scrollTop >= document.documentElement.clientHeight){        this.setState({          isShowPoint: true        })      } else{        this.setState({          isShowPoint: false        })      }    }    render() {        const {cateList,newItem,newItemList,popularItem,popularItemList,topicList,flashSaleIndexVO,saleIndexVO,focusList,policyDescList,tagList} = this.state        return (            <div className='firstWrap'>                {/*<FirstAlertTip/>*/}                <header className='firstHeader'>                    <div className="logo">                        <a href="javascript:;"></a>                        <div className='search'>                            <i className='searchIcon'/>                            <p >搜索商品，共9763款好物</p>                        </div>                    </div>                    <div className='navWrap'>                        <div className='navList'>                            <div className="tab active" onClick={this.addClass}>                                <span>推荐</span>                            </div>                          {                            cateList.map((cate,index) => {                            return (                            <div className='tab' onClick={this.addClass} key={index}>                            <span>{cate.name}</span>                            </div>                            )                          })                          }                        </div>                    </div>                </header>                <div className="cateShop">                    <i className='cateImg'/>                </div>                <div className="tuijian">                <section className='carouselNav'>                  <div className="swiper-container">                    <div className="swiper-wrapper">                      {                        focusList.map((focu,index) => {                          return (                            <div className="swiper-slide" key={index}>                              <img src={focu.picUrl} alt=""/>                            </div>                          )                        })                      }                    </div>                    <div className="swiper-pagination"/>                  </div>                  <div className="wySure">                    <ul className='sureList'>                      {                        policyDescList.map((policy,index) => {                          return (                            <li key={index}>                              <img src={policy.icon} alt=""/>                              <span className='text'>{policy.desc}</span>                            </li>                          )                        })                      }                    </ul>                  </div>                </section>              </div>                <section className='firstContent'>                  <section className="productShop">                    <div className="shopTop">                      <span className='textWrap'>                        <span className='text'>                          品牌制造商直供                        </span>                        <i className='icon'/>                      </span>                    </div>                    <div className="shopContent">                      <ul className="shopList">                        {                          tagList.map((tag,index) => {                              if(index<4){                                return (<li key={index}>                                  <div className='text'>                                    <h4>{tag.name}</h4>                                    <p>{tag.floorPrice}元起</p>                                  </div>                                  <img src={tag.picUrl} alt=""/>                                </li>)                              }else {                                return                              }                          })                        }                      </ul>                    </div>                  </section>                  <FirstItemList newItem={newItem} newItemList={newItemList}/>                  <FirstItemList popularItem={popularItem} popularItemList={popularItemList}/>                  <section className="timeBuy">                        <div className="countDown">                          <a href="javascript:;">                            <div className="buyLeft">                              <div className="title">严选限时购</div>                              <div className="countNum">                                <span className="time"> 10 </span>                                <span className="colon">:</span>                                <span className="time"> 10 </span>                                <span className="colon">:</span>                                <span className="time">59 </span>                              </div>                              <div className="nextTitle">下一场 6:00  开始</div>                            </div>                            <div className="buyRight">                              <img src={flashSaleIndexVO.primaryPicUrl} alt="" />                              <div className="price">                                <span className="nowPrice">                                  ￥{flashSaleIndexVO.activityPrice}                                </span>                                <span className="oldPrice">                                  ￥{flashSaleIndexVO.originPrice}                                </span>                              </div>                            </div>                          </a>                        </div>                  </section>                  <section className='welfareTeam'>                    <img src={saleIndexVO.picUrl} alt="" />                  </section>                  <section className="goodSelect">                  <section className="selectTop">            <span className='textWrap'>              <span className='text'>                专题精选              </span>              <i className='icon'></i>            </span>                  </section>                  <section className="selectBottom">                    <div className="picWrap">                      <ul>                        {                          topicList.map((topic,index) => {                            return (                              <li key={index}>                                <img src={topic.itemPicUrl} alt=""/>                                <div className="text">                                  <div className="textLeft">                                    <h4>{topic.title}</h4>                                    <p>{topic.subtitle}</p>                                  </div>                                  <div className="textRight">                                    {topic.priceInfo}元起                                  </div>                                </div>                              </li>                            )                        })                        }                      </ul>                    </div>                  </section>                </section>                </section>                <GoodClassList cateList={cateList}/>                <FirstPageBotton/>                <ToTop isShowPoint={this.state.isShowPoint}/>              </div>        )    }}